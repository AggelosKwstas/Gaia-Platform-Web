<?php

namespace app\models\pure;

use Imagine\Image\Box;
use Yii;
use yii\base\Exception;
use yii\db\ActiveRecord;
use yii\db\Connection;
use yii\helpers\FileHelper;
use yii\helpers\Url;
use yii\web\UploadedFile;

/**
 * This is the model class for table "{{%image}}".
 *
 * @property int $id
 * @property string $name
 * @property string $path
 * @property int $size
 * @property int width
 * @property int height
 * @property string $thumbnail_path
 * @property int $visible
 * @property string $date_created
 * @property string $date_updated
 *
 * @property User[] $users
 */
class Image extends \app\models\generated\Image
{
    /**
     * {@inheritdoc}
     */


    public $image;
    public $images;

    public $thumbnail;

    public static function tableName()
    {
        return '{{%image}}';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'path', 'thumbnail_path', 'height', 'width', "size"], 'required'],
            [[ 'size', 'height', 'width'], 'integer'],
            [['date_created', 'date_updated'], 'safe'],
            ['thumbnail', 'file', 'skipOnEmpty' => true],
            [['images'], 'file', 'skipOnEmpty' => true, 'extensions' => ['png', 'jpg', 'dmp'], "maxFiles" => 25, 'maxSize' => 1024 * 1024 * 1024],
            [['image'], 'file', 'skipOnEmpty' => true, 'maxSize' => 1024 * 1024 * 1024],
            [['name'], 'string', 'max' => 128],
            [['path', 'thumbnail_path'], 'string', 'max' => 512],
        ];
    }

    public function getAttributes($names = null, $except = [])
    {
        $result = parent::getAttributes($names, $except);

        $result["image"] = $this->path ? Url::base(true) . "/" . $this->path : false;
        $result["thumbnail"] = $this->thumbnail_path ? Url::base(true) . "/" . $this->thumbnail_path : false;


        return $result;
    }


    public function getFullImagePath()
    {

        if ($this->path)
            return Url::base(true) . "/$this->path";
        return "";

    }

    public function getFullThumbnailPath()
    {

        if ($this->path)
            return Url::base(true) . "/$this->thumbnail_path";
        return "";

    }


    public function save($runValidation = true, $attributeNames = null)
    {


        if ($this->image instanceof UploadedFile || $this->image = UploadedFile::getInstance($this, 'image')) {
            if (Yii::$app->user->id) {

                try {
                    FileHelper::createDirectory("upload/image/" . Yii::$app->user->id);
                    FileHelper::createDirectory("upload/image/" . Yii::$app->user->id . "/thumbnail");
                } catch (Exception $e) {

                }
            }
            $this->thumbnail_path = $this->getThumbnailPath();

            $path = $this->getImagePath(false);
            $this->path = $path . "." . $this->image->extension;

            list($this->width, $this->height) = getimagesize($this->image->tempName);


            $this->name = $this->image->name;
            $this->size = $this->image->size;



            if ($this->validate()) {

                $result = parent::save(false, $attributeNames); // TODO: Change the autogenerated stub

                if ($result) {


                    try {

                        $imagine = \yii\imagine\Image::getImagine()->open($this->image->tempName);
                        $scale = $imagine->getSize()->getWidth() / $imagine->getSize()->getHeight();


                        $this->image->saveAs($this->path);
                        $imagine->thumbnail(new Box(100, 100 / $scale))->save($this->thumbnail_path, ['quality' => 90]);
                    } catch (\Exception $e) {

                        return die($e->getMessage());
                    }
                }


                return $result;
            } else {
                die(json_encode($this->getFirstErrors()) . $this->image->extension);

            }


        } else if (!$this->isNewRecord) {
            die("couldn't save image please contact admin");
            return parent::save();
        }


        return false;
    }


    public
    function delete()
    {
        parent::delete();
        if (file_exists($this->path))
            unlink($this->path);
        if (file_exists($this->thumbnail_path))
            unlink($this->thumbnail_path);


    }


    public function getImagePath($extension = true)
    {


        if (!$this->image) return "";
        $user_appender = !Yii::$app->user->isGuest && Yii::$app->user->id ? Yii::$app->user->id . "/" : "";
        $path = "upload/image/$user_appender" . strtotime("now") . rand();

        if ($extension)
            return $path . "." . $this->image->extension;
        return $path;

    }

    public
    function getThumbnailPath()
    {


        if (!$this->image) return "";
        $user_appender = Yii::$app->user->id ? Yii::$app->user->id . "/thumbnail/" : "thumbnail/";
        return "upload/image/$user_appender" . strtotime("now") . rand() . "." . $this->image->extension;

    }


    public function getSizeMB()
    {
        return self::formatBytes(intval($this->size));
    }

    public static function formatBytes($size, $base = 2)
    {


        $base = log($size) / log(1024);
        $suffix = array("", "KB", "MB", "GB", "TB")[floor($base)];
        return round(pow(1024, $base - floor($base)), 2) . " " . $suffix;
    }
}
